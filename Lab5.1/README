Summary
Memory is always a scare respurce. No matter how much memory is available,
it never seems to be enough. 

This lecture tell us to allocate memory using "malloc" call in the standard C library to allocate 
a great deal of memory. Let’s start with a very simple program, 
but one that would defeat old MS-DOS-based programs,because they cannot access memory outside thebase 640K memory map of PCs.

The first program asks the malloc library to give it a pointer to a megabyte of memory, it can check to ensure
that malloc was successful and then use some of the memory to show that it exists. 

If you run the program, it prints Hello World, showing that malloc did indeed return the megabyte
of usable memory. Because the malloc returns a void * pointer, it cast the result to the char * that its needed.
The malloc function is guaranteed to return memory that is aligned so that it can be cast to a pointer of
any type.

Allocating Lots of Memory

Allocated memory is managed by the Linux kernel. Each time the program asks for
memory the Linux kernel takes charge and decides how to handle the request.
Initially, the kernel was simply able to use free physical memory to satisfy the application’s request for
memory, but once physical memory was full, it started using what’s called swap space. On Linux, this is
a separate disk area allocated when the system was installed. If you’re familiar with Windows, the Linux
swap space acts a little like the hidden Windows swap file. However, unlike Windows, there are no local
heap, global heap, or discardable memory segments to worry about in code — the Linux kernel does all
the management for you.
The kernel moves data and program code between physical memory and the swap space so that each
time you read or write memory, the data always appears to have been in physical memory, wherever it
was actually located before you attempted to access it.
